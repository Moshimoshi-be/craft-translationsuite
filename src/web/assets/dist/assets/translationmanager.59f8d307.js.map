{"version":3,"file":"translationmanager.59f8d307.js","sources":["../../../../../buildchain/src/vue/translationmanager/Toolbar.vue","../../../../../buildchain/src/vue/translationmanager/Sidebar.vue","../../../../../buildchain/src/vue/translationmanager/Main.vue","../../../../../buildchain/src/vue/translationmanager/Pagination.vue","../../../../../buildchain/src/js/translationmanager.ts"],"sourcesContent":["<template>\n  <button\n      v-show=\"selectedCount\"\n      @click=\"deleteSelectedTranslations()\"\n      type=\"button\"\n      class=\"btn menubtn a-button--action\"\n      data-icon=\"trash\"\n      title=\"Actions\"\n      tabindex=\"0\">\n  </button>\n  <div class=\"flex flex-grow texticon search icon clearable\">\n    <input v-model=\"filter\" @keyup=\"filterResults\" type=\"text\" class=\"text fullwidth\" autocomplete=\"off\" placeholder=\"Search\" aria-label=\"Search\">\n    <div class=\"clear hidden\" title=\"Clear\" aria-label=\"Clear\"></div>\n  </div>\n  <button @click=\"updateTranslations\" v-show=\"selectedCategory != 'add'\" class=\"btn submit\">Save</button>\n</template>\n\n<script lang=\"ts\">\n\nimport {defineComponent } from 'vue';\nimport { mapState, mapMutations } from \"vuex\";\n\nexport default defineComponent({\n  data: () => ({\n\n  }),\n  computed: {\n    filter: {\n      get() {\n        return this.$store.state.filter;\n      },\n      set(value) {\n        return this.$store.dispatch('setFilter', value.toLowerCase());\n      }\n    },\n    ...mapState([\n        'translations',\n        'filteredTranslations',\n        'selectedCount',\n        'selectedCategory'\n    ])\n  },\n  methods: {\n    filterResults(e) {\n      // Let's filter out the modifiers.\n      // There's a lot more but hey\n      if (\n          e.keyCode == 16 || // Shift\n          e.keyCode == 17 || // Control\n          e.keyCode == 18 || // Option\n          e.keyCode == 20 || // Capslock\n          e.keyCode == 27 || // Escape\n          e.keyCode == 37 || // Arrow left\n          e.keyCode == 38 || // Arrow up\n          e.keyCode == 39 || // Arrow right\n          e.keyCode == 40 || // Arrow down\n          e.keycode == 91 // Meta?\n      ) {\n        return;\n      }\n      console.log(this.filter)\n      let filtered = [];\n      console.log(this.translations);\n      filtered = this.translations.filter(translation => {\n        // Let's check for the translations\n        const languages = translation.languages;\n\n        // Does the message include part of the filter\n        const message = translation.message.toLowerCase();\n        if (message.includes(this.filter)) {\n          return true\n        }\n\n        // Maybe the translations?\n        for (const [language, source] of Object.entries(languages)){\n\n          if (source.db && source.db.toLowerCase().includes(this.filter)) {\n            return true;\n          }\n          if (source.file && !source.db && source.file.toLowerCase().includes(this.filter)) {\n            return true;\n          }\n        }\n\n        // Nothing found\n        return false;\n      });\n\n      this.$store.commit('filterTranslations', filtered);\n    },\n    deleteSelectedTranslations() {\n      this.$store.commit('deleteSelectedTranslations');\n    },\n    updateTranslations() {\n      this.$store.commit('updateChangedTranslations');\n    }\n  },\n  mounted() {\n    console.log(\"Loaded\");\n  },\n});\n</script>\n","<template>\n  <nav>\n    <ul>\n      <li>\n        <a href=\"#\" @click.prevent=\"selectCategory({category: 'missing', refresh: true})\" :class=\"{'sel': selectedCategory == 'missing'}\">\n          <span class=\"label\">Missing Translations</span>\n          <span class=\"badge\">{{ countMissingTranslations }}</span>\n        </a>\n      </li>\n      <li>\n        <a href=\"#\" @click.prevent=\"selectCategory({category: 'add'})\" :class=\"{'sel': selectedCategory == 'add'}\">\n          <span class=\"label\">Add translation</span>\n        </a>\n      </li>\n\n      <li class=\"heading\">\n        <span>Categories</span>\n      </li>\n\n      <li v-for=\"(category, index) in categories\" :key=\"index\">\n        <a href=\"#\" @click.prevent=\"selectCategory({category: category, refresh: true})\" :class=\"{'sel': selectedCategory == category}\">\n          <span class=\"label\">{{ $filters.ucFirst(category) }}</span>\n        </a>\n      </li>\n    </ul>\n  </nav>\n</template>\n\n<script lang=\"ts\">\n\nimport {defineComponent} from 'vue';\nimport {mapState, mapGetters, mapMutations} from 'vuex';\nimport axios from 'axios';\n\nexport default defineComponent({\n  data: () => ({}),\n  methods: {\n    uppercaseFirst(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    },\n    ...mapMutations([\n        'selectCategory'\n    ])\n  },\n  computed: {\n    ...mapState([\n      'categories',\n      'languages',\n      'missingTranslations',\n      'countMissingTranslations',\n        'selectedCategory'\n    ]),\n    ...mapGetters([\n      'getSelectedCategory'\n    ])\n  },\n  mounted() {\n    console.log(this.categories);\n  },\n});\n</script>\n","<template>\n  <div class=\"main\">\n    <div class=\"elements\">\n      <form class=\"flex flex-col justify-center items-start w-full xl:w-8/12\" v-if=\"selectedCategory =='add'\">\n        <div class=\"flex flex-nowrap mb-16 w-full\">\n          <label for=\"category\" class=\"inline-block mr-8 min-w-48\">Choose a category:</label>\n          <div class=\"select w-full\">\n            <select name=\"category\" class=\"w-full\" v-model=\"category\">\n              <option disabled value=\"\">--- Select a category ---</option>\n              <option v-for=\"category in categories\" :value=\"category\">{{ this.$filters.ucFirst(category) }}</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"flex flex-nowrap mb-16 w-full\">\n          <label for=\"message\" class=\"inline-block mr-8 min-w-48\">Message:</label>\n          <textarea name=\"message\" type=\"text\" rows=\"3\" class=\"text w-full\" v-model=\"message\"/>\n        </div>\n        <div class=\"flex w-full justify-end mt-4\">\n          <input\n              @click.prevent=\"addSourceMessage\"\n              :disabled=\"isFormDisabled\"\n              :class=\"{'disabled': isFormDisabled }\"\n              type=\"submit\"\n              class=\"btn submit px-6\"\n              value=\"Add\"/>\n        </div>\n\n      </form>\n\n      <div class=\"tableview tablepane\" v-else>\n        <table class=\"data fullwidth\">\n          <thead>\n          <tr>\n            <th @click=\"selectAll\" class=\"checkbox-cell selectallcontainer orderable\" role=\"checkbox\" tabindex=\"0\"\n                aria-checked=\"false\"\n                aria-label=\"Select all\">\n              <div id=\"selectAll\" class=\"checkbox\"></div>\n            </th>\n            <th v-show=\"selectedCategory == 'missing'\" scope=\"col\" data-attribute=\"category\">Category</th>\n            <th scope=\"col\" data-attribute=\"message\">Message</th>\n            <th v-for=\"language in languages\" scope=\"col\" :data-attribute=\"'language-' + language.locale\">\n              {{ language.name }}\n            </th>\n          </tr>\n          </thead>\n\n          <tbody>\n          <tr v-for=\"(translation, index) in filteredTranslations.slice(paginatorOffset, paginatorLimit)\"\n              :key=\"selectedCategory == 'missing' ? 'missing' + '-' + index : translation.category + '-' + index\">\n            <td class=\"checkbox-cell\">\n              <div @click=\"selectOne(translation)\" class=\"checkbox\" :class=\"{'checked': translation.selected }\"\n                   title=\"Select\" aria-label=\"Select\"></div>\n            </td>\n            <td v-show=\"selectedCategory == 'missing'\">\n              <span class=\"title\">{{ translation.category }}</span>\n            </td>\n            <td class=\"max-w-40\">\n              <span class=\"title\">{{ translation.message }}</span>\n            </td>\n            <td v-for=\"(language, key) in translation.languages\" :key=\"translation.category + '-' + index + '-' + key\">\n              <div class=\"a-translation-field\">\n                <textarea @keyup=\"markAsChanged(translation)\" v-model=\"language.db\"\n                          :name=\"'translation-' + index + '-' + key\" rows=\"1\" autocomplete=\"off\" class=\"text w-full\"\n                          :placeholder=\"language.file\"></textarea>\n                <label\n                    :class=\"language.db ? 'type-db' : language.file ? 'type-file' : 'type-missing'\">{{\n                    language.db ? 'db' : language.file ? 'file' : 'missing'\n                  }}</label>\n              </div>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport {defineComponent} from 'vue';\nimport {mapState} from 'vuex';\nimport axios from 'axios';\n\nexport default defineComponent({\n  data: () => ({\n    category: '',\n    message: '',\n    timeout: null,\n  }),\n  computed: {\n    isFormDisabled() {\n      return this.categories.length == 0 || !this.category || !this.message;\n    },\n    ...mapState([\n      'translations',\n      'filteredTranslations',\n      'languages',\n      'selectedCategory',\n      'categories',\n      'paginatorLimit',\n      'paginatorOffset'\n    ])\n  },\n  methods: {\n    selectAll(e) {\n      const selectAll = document.getElementById('selectAll');\n      const checked = !selectAll.classList.contains('checked');\n\n      selectAll.classList.toggle('checked');\n      for (let translation of this.filteredTranslations) {\n        translation.selected = checked;\n      }\n      if (checked) {\n        this.$store.commit('setSelectedCount', this.filteredTranslations.length);\n      } else {\n        this.$store.commit('setSelectedCount', 0);\n      }\n    },\n    selectOne(translation) {\n      translation.selected = !translation.selected;\n      if (translation.selected) {\n        console.log(\"Incrementing\")\n        this.$store.commit('incrementSelectedCount');\n      } else {\n        console.log(\"Decrementing\")\n        this.$store.commit('decrementSelectedCount');\n      }\n    },\n    addSourceMessage() {\n\n      const data = {\n        category: this.category,\n        message: this.message,\n      };\n\n      axios.post('/admin/translationsuite/translations/add-source', data).then(result => {\n        const data = result.data;\n\n        if (data.message == 'success' && result.status === 200) {\n          // It was added.\n          this.category = '';\n          this.message = '';\n          this.$store.commit('incrementMissingTranslations');\n        }\n      });\n    },\n    markAsChanged(translation) {\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(_ => {\n        translation.changed = true;\n        console.log(\"Updated\");\n      }, 500);\n    }\n  }\n});\n</script>\n","<template>\n  <div id=\"count-container\" class=\"light flex-grow\" v-if=\"selectedCategory != 'add'\">\n    <div class=\"flex pagination\">\n      <div @click=\"previousPageOfTranslations\" class=\"page-link prev-page\" :class=\"{'disabled': paginatorOffset == 0 }\" title=\"Previous Page\"></div>\n      <div @click=\"nextPageOfTranslations\" class=\"page-link next-page\" :class=\"{'disabled': (paginatorOffset + paginatorLimit) >= amountOfTranslations }\" title=\"Next Page\"></div>\n      <div class=\"page-info\">{{ paginatorOffset }}-{{ amountOfResults }} of {{ amountOfTranslations }} entries</div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport {defineComponent} from 'vue';\nimport {mapState, mapMutations} from \"vuex\";\n\nexport default defineComponent({\n  data: () => {\n    return {}\n  },\n  computed: {\n    amountOfResults() {\n      if(this.filteredTranslations.length < this.paginatorLimit) {\n        return this.filteredTranslations.length;\n      }\n\n      return this.paginatorLimit;\n    },\n    amountOfTranslations() {\n      return this.filteredTranslations.length\n    },\n    ...mapState([\n      'filteredTranslations',\n      'paginatorLimit',\n      'paginatorOffset',\n        'selectedCategory'\n    ])\n  },\n  methods: {\n    ...mapMutations([\n        'nextPageOfTranslations',\n        'previousPageOfTranslations'\n    ])\n  }\n});\n\n</script>","import {createApp, defineComponent, defineAsyncComponent} from 'vue';\nimport {createStore} from \"vuex\";\nimport Toolbar from \"@/vue/translationmanager/Toolbar.vue\";\nimport Sidebar from \"@/vue/translationmanager/Sidebar.vue\";\nimport Main from \"@/vue/translationmanager/Main.vue\";\nimport Pagination from \"@/vue/translationmanager/Pagination.vue\";\nimport axios from \"axios\";\n\nconst store = createStore({\n    state() {\n        return {\n            categories: [],\n            selectedCategory: 'missing',\n            countMissingTranslations: 0,\n            missingTranslations: [],\n            translations: [],\n            filteredTranslations: [],\n            paginatorLimit: 10,\n            paginatorStep: 10,\n            paginatorOffset: 0,\n            languages: [],\n            filter: '',\n            hasSelected: false,\n            selectedCount: 0,\n            isLoading: false, // Used for showing a spinner in the main window when something is loading.\n        }\n    },\n    getters: {\n        getSelectedCategory(state) {\n            return state.countMissingTranslations > 0 ? 'missing' : state.categories[0];\n        }\n    },\n    mutations: {\n        setInitialSelectedCategory(state) {\n            if (state.countMissingTranslations > 0) {\n                state.selectedCategory = 'missing';\n            } else {\n                state.selectedCategory = state.categories[0];\n            }\n        },\n        setCategories(state, value) {\n            state.categories = value;\n        },\n        setLanguages(state, value) {\n            state.languages = value;\n        },\n        setFilter(state, value) {\n            console.log(\"Set filter to\", value);\n            state.filter = value;\n        },\n        setMissingTranslations(state, value) {\n            console.log(\"SETTING TRANSLATIONS\", value)\n            state.translations = value;\n            state.filteredTranslations = state.translations;\n            state.countMissingTranslations = value.length;\n        },\n        incrementMissingTranslations(state) {\n            state.countMissingTranslations++;\n        },\n        setTranslations(state, value) {\n            state.translations = value;\n            state.filteredTranslations = value;\n        },\n        setSelectedCount(state, value) {\n          state.selectedCount = value;\n          console.log(state.selectedCount)\n        },\n        incrementSelectedCount(state) {\n            state.selectedCount++;\n            console.log(state.selectedCount);\n        },\n        decrementSelectedCount(state) {\n            state.selectedCount--;\n            console.log(state.selectedCount);\n        },\n        toggleHasSelected(state) {\n          state.hasSelected = !state.hasSelected;\n        },\n        selectCategory(state, value) {\n            // Check if there are changes to the translations first\n            const changes = state.translations.filter(translation => translation.changed);\n            if (changes.length) {\n                if (!confirm(\"You have unsaved translations, do you want to discard them?\")) {\n                    return;\n                }\n            }\n\n            const refresh = value.refresh;\n            const category = value.category;\n            state.selectedCategory = category;\n            state.paginatorOffset = 0;\n            state.paginatorLimit = state.paginatorStep;\n\n            // Reset stuff\n            state.filter = '';\n            const selectAll = document.getElementById('selectAll');\n            if (selectAll) {\n                selectAll.classList.remove('checked');\n            }\n\n            if (refresh) {\n                Promise.resolve(store.dispatch('fetchTranslations', category)).then(translations => {\n                   state.translations = translations;\n                   state.filteredTranslations = translations;\n                   if (category == 'missing') {\n                       state.countMissingTranslations = state.translations.length;\n                   }\n                });\n            }\n        },\n        filterTranslations(state, filtered) {\n            state.filteredTranslations = filtered;\n        },\n        nextPageOfTranslations(state) {\n            if (state.paginatorOffset + state.paginatorLimit > state.filteredTranslations.length) {\n                return false;\n            }\n            state.paginatorOffset += state.paginatorStep;\n            state.paginatorLimit = state.paginatorOffset + state.paginatorStep;\n            console.log(\"next page\", state.paginatorOffset, state.paginatorLimit);\n        },\n        previousPageOfTranslations(state) {\n            if (state.paginatorOffset == 0) {\n                return false;\n            }\n            state.paginatorOffset -= state.paginatorStep;\n            state.paginatorLimit = state.paginatorOffset + state.paginatorStep;\n            console.log(\"prev page\", state.paginatorOffset, state.paginatorLimit)\n        },\n        deleteSelectedTranslations(state) {\n            const selectedTranslations = state.filteredTranslations.filter(translation => translation.selected == 1);\n            const notSelectedTranslations = state.filteredTranslations.filter(translation => translation.selected == 0);\n\n            if (state.selectedCategory == 'missing') {\n                state.countMissingTranslations = notSelectedTranslations.length;\n            }\n            const data = {\n                translations: selectedTranslations\n            };\n\n            axios.post(\"/admin/translationsuite/translations/delete-translations\", data).then(response => {\n                state.translations = state.filteredTranslations = state.translations.filter(function(e) {\n                    return this.indexOf(e) < 0;\n                }, selectedTranslations);\n            });\n        },\n        updateChangedTranslations(state) {\n            const changedTranslations = state.translations.filter(translation => translation.changed);\n            console.log(changedTranslations);\n            const data = {\n              translations: changedTranslations,\n            };\n            axios.post(\"/admin/translationsuite/translations/update-translations\", data).then(response => {\n                for (let translation of changedTranslations) {\n                    translation.changed = false;\n                }\n            }).catch(error => {\n                console.error(error)\n            });\n        }\n    },\n    actions: {\n        setFilter: ({commit, state}, value) => {\n            commit('setFilter', value)\n            return state.filter;\n        },\n        async fetchTranslations(state, category) {\n            let request = await axios.get(\"/admin/translationsuite/translations/get-translations/\" + category);\n            return request.data;\n        },\n    }\n});\n\nconst app = createApp(defineComponent({\n    components: {\n        'toolbar': Toolbar,\n        'sidebar': Sidebar,\n        'manager': Main,\n        'pagination': Pagination,\n    },\n    data: () => ({}),\n    methods: {\n        async getCategories() {\n            let request = await axios.get(\"/admin/translationsuite/translations/get-categories\");\n            return request.data\n        },\n        async getLanguages() {\n            let request = await axios.get(\"/admin/translationsuite/translations/get-languages\");\n            return request.data;\n        }\n    },\n    mounted() {\n        Promise.all([this.getCategories(), this.getLanguages(), store.dispatch('fetchTranslations', 'missing')]).then(results => {\n            store.commit('setCategories', results[0]);\n            store.commit('setLanguages', results[1]);\n            store.commit('setMissingTranslations', results[2]);\n\n            if (store.state.countMissingTranslations > 0) {\n                store.commit('selectCategory', {category: 'missing'});\n            } else {\n                store.commit('selectCategory', {category: store.state.categories[0], refresh: true});\n            }\n        });\n\n        document.addEventListener('keydown', ev => {\n            const cmdDown = ev.metaKey || ev.ctrlKey;\n            const saveKey = ev.key == \"s\"\n\n            if (cmdDown && saveKey) {\n                ev.preventDefault();\n                store.commit('updateChangedTranslations');\n            }\n        });\n    }\n}));\napp.config.globalProperties.$filters = {\n    ucFirst(value: string) {\n        return value.charAt(0).toUpperCase() + value.slice(1);\n    }\n}\napp.use(store);\napp.mount('#main');\n\n"],"names":["defineComponent","data","computed","__spreadValues","filter","[object Object]","this","$store","state","value","dispatch","toLowerCase","mapState","methods","e","keyCode","keycode","log","filtered","translations","languages","translation","message","includes","language","source","Object","entries","db","file","commit","uppercaseFirst","string","charAt","toUpperCase","slice","mapMutations","mapGetters","categories","category","timeout","length","selectAll","document","getElementById","checked","classList","contains","toggle","filteredTranslations","selected","post","then","result","status","setTimeout","changed","class","key","for","disabled","_hoisted_13","id","scope","_createBlock","_hoisted_5","name","_renderList","type","rows","onClick","_hoisted_11","role","tabindex","aria-checked","title","onUpdate:modelValue","autocomplete","paginatorLimit","store","createStore","selectedCategory","countMissingTranslations","missingTranslations","paginatorStep","paginatorOffset","hasSelected","selectedCount","isLoading","getters","getSelectedCategory","mutations","confirm","refresh","remove","resolve","selectedTranslations","notSelectedTranslations","indexOf","changedTranslations","catch","error","actions","setFilter","axios","get","app","createApp","components","toolbar","Toolbar","sidebar","Sidebar","manager","Main","pagination","Pagination","all","getCategories","getLanguages","results","addEventListener","cmdDown","ev","metaKey","ctrlKey","saveKey","preventDefault","config","globalProperties","$filters","ucFirst","use","mount"],"mappings":"+eAsBA,MAAeA,EAAgB,CAC7BC,KAAM,SAGNC,SAAUC,GACRC,OAAQ,CACNC,aACSC,KAAKC,OAAOC,MAAMJ,QAE3BC,IAAII,UACKH,KAAKC,OAAOG,SAAS,YAAaD,EAAME,kBAGhDC,EAAS,CACR,eACA,uBACA,gBACA,sBAGNC,QAAS,CACPR,cAAcS,MAIK,IAAbA,EAAEC,SACW,IAAbD,EAAEC,SACW,IAAbD,EAAEC,SACW,IAAbD,EAAEC,SACW,IAAbD,EAAEC,SACW,IAAbD,EAAEC,SACW,IAAbD,EAAEC,SACW,IAAbD,EAAEC,SACW,IAAbD,EAAEC,SACW,IAAbD,EAAEE,uBAIEC,IAAIX,KAAKF,YACbc,EAAW,WACPD,IAAIX,KAAKa,gBACNb,KAAKa,aAAaf,kBAErBgB,EAAYC,EAAYD,aAGdC,EAAYC,QAAQX,cACxBY,SAASjB,KAAKF,eACjB,YAIGoB,EAAUC,KAAWC,OAAOC,QAAQP,GAAW,IAErDK,EAAOG,IAAMH,EAAOG,GAAGjB,cAAcY,SAASjB,KAAKF,eAC9C,KAELqB,EAAOI,OAASJ,EAAOG,IAAMH,EAAOI,KAAKlB,cAAcY,SAASjB,KAAKF,eAChE,SAKJ,UAGJG,OAAOuB,OAAO,qBAAsBZ,IAE3Cb,kCACOE,OAAOuB,OAAO,+BAErBzB,0BACOE,OAAOuB,OAAO,+BAGvBzB,kBACUY,IAAI,y0BChEhB,MAAejB,EAAgB,CAC7BC,KAAM,SACNY,QAASV,GACP4B,eAAeC,GACNA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,IAEpDC,EAAa,CACZ,oBAGNlC,SAAUC,OACLS,EAAS,CACV,aACA,YACA,sBACA,2BACE,sBAEDyB,EAAW,CACZ,yBAGJhC,kBACUY,IAAIX,KAAKgC,m5BC2BrB,QAAkBtC,GAChBC,KAAM,KAAO,CACXsC,SAAU,GACVjB,QAAS,GACTkB,QAAS,OAEXtC,SAAUC,GACRE,wBACmC,GAA1BC,KAAKgC,WAAWG,SAAgBnC,KAAKiC,WAAajC,KAAKgB,UAE7DV,EAAS,CACV,eACA,uBACA,YACA,mBACA,aACA,iBACA,qBAGJC,QAAS,CACPR,UAAUS,SACF4B,EAAYC,SAASC,eAAe,aACpCC,GAAWH,EAAUI,UAAUC,SAAS,aAEpCD,UAAUE,OAAO,mBAClB3B,KAAef,KAAK2C,uBACfC,SAAWL,EAErBA,OACGtC,OAAOuB,OAAO,mBAAoBxB,KAAK2C,qBAAqBR,aAE5DlC,OAAOuB,OAAO,mBAAoB,IAG3CzB,UAAUgB,KACI6B,UAAY7B,EAAY6B,SAChC7B,EAAY6B,kBACNjC,IAAI,qBACPV,OAAOuB,OAAO,oCAEXb,IAAI,qBACPV,OAAOuB,OAAO,4BAGvBzB,yBAEQJ,EAAO,CACXsC,SAAUjC,KAAKiC,SACfjB,QAAShB,KAAKgB,WAGV6B,KAAK,kDAAmDlD,GAAMmD,UAG9C,WAFPC,EAAOpD,KAEXqB,SAA0C,MAAlB+B,EAAOC,cAEjCf,SAAW,QACXjB,QAAU,QACVf,OAAOuB,OAAO,qCAIzBzB,cAAcgB,gBACCf,KAAKkC,cACbA,QAAUe,kBACDC,SAAU,UACdvC,IAAI,aACX,YAtJAwC,MAAM,gCACHC,IAAK,4HAEeC,IAAK,gHAGNC,6GAMAD,IAAK,yGAezBD,IAAK,0DAOMG,WAAYC,6CAEiCC,mDACvCA,yDAeRN,MAAM,oBAEVA,MAAM,YACFA,MAAM,eAGPA,MAAM,oFA1DrBO,qDAUUA,uBANJC,2BAC0BC,sGAEkBC,wJAMnBD,KAAK,UAAOE,KAAK,OAAIC,mIAKzCC,2FACAV,0BACDH,sDAEAW,2DAgDEJ,QAAAO,qDAvCmBD,4DAAmDb,mDAAgBe,gBACtFC,aACAC,wKAK2CX,6BAC1C,gRASkCO,0BAChCb,MAAM,kCAASkB,4OAQuE,yDAEzD,+BACrBC,gCAA0CV,KAAK,uBAAIG,SAAmBQ,mBACtEpB,2DAFqD,wMC9ChF,OAAezD,EAAgB,CAC7BC,KAAM,KACG,IAETC,SAAUC,GACRE,yBACKC,KAAK2C,qBAAqBR,OAASnC,KAAKwE,eAClCxE,KAAK2C,qBAAqBR,OAG5BnC,KAAKwE,gBAEdzE,8BACSC,KAAK2C,qBAAqBR,SAEhC7B,EAAS,CACV,uBACA,iBACA,kBACE,sBAGNC,QAASV,KACJiC,EAAa,CACZ,yBACA,0wBChCR,MAAM2C,GAAQC,EAAY,CACtBxE,WACW,CACH8B,WAAY,GACZ2C,iBAAkB,UAClBC,yBAA0B,EAC1BC,oBAAqB,GACrBhE,aAAc,GACd8B,qBAAsB,GACtB6B,eAAgB,GAChBM,cAAe,GACfC,gBAAiB,EACjBjE,UAAW,GACXhB,OAAQ,GACRkF,aAAa,EACbC,cAAe,EACfC,WAAW,IAGnBC,QAAS,CACLC,oBAAoBlF,GACTA,EAAM0E,yBAA2B,EAAI,UAAY1E,EAAM8B,WAAW,IAGjFqD,UAAW,CACPtF,2BAA2BG,GACnBA,EAAM0E,yBAA2B,IAC3BD,iBAAmB,YAEnBA,iBAAmBzE,EAAM8B,WAAW,IAGlDjC,cAAcG,EAAOC,KACX6B,WAAa7B,GAEvBJ,aAAaG,EAAOC,KACVW,UAAYX,GAEtBJ,UAAUG,EAAOC,WACLQ,IAAI,gBAAiBR,KACvBL,OAASK,GAEnBJ,uBAAuBG,EAAOC,WAClBQ,IAAI,uBAAwBR,KAC9BU,aAAeV,IACfwC,qBAAuBzC,EAAMW,eAC7B+D,yBAA2BzE,EAAMgC,QAE3CpC,6BAA6BG,KACnB0E,4BAEV7E,gBAAgBG,EAAOC,KACbU,aAAeV,IACfwC,qBAAuBxC,GAEjCJ,iBAAiBG,EAAOC,KAChB8E,cAAgB9E,UACdQ,IAAIT,EAAM+E,gBAEpBlF,uBAAuBG,KACb+E,wBACEtE,IAAIT,EAAM+E,gBAEtBlF,uBAAuBG,KACb+E,wBACEtE,IAAIT,EAAM+E,gBAEtBlF,kBAAkBG,KACV8E,aAAe9E,EAAM8E,aAE7BjF,eAAeG,EAAOC,MAEFD,EAAMW,aAAaf,WAAsBiB,EAAYmC,UACzDf,SACHmD,QAAQ,4EAKXC,EAAUpF,EAAMoF,QAChBtD,EAAW9B,EAAM8B,WACjB0C,iBAAmB1C,IACnB8C,gBAAkB,IAClBP,eAAiBtE,EAAM4E,gBAGvBhF,OAAS,SACTsC,EAAYC,SAASC,eAAe,aACtCF,KACUI,UAAUgD,OAAO,WAG3BD,WACQE,QAAQhB,GAAMrE,SAAS,oBAAqB6B,IAAWa,YACtDjC,aAAeA,IACf8B,qBAAuB9B,EACb,WAAZoB,MACM2C,yBAA2B1E,EAAMW,aAAasB,YAKnEpC,mBAAmBG,EAAOU,KAChB+B,qBAAuB/B,GAEjCb,uBAAuBG,MACfA,EAAM6E,gBAAkB7E,EAAMsE,eAAiBtE,EAAMyC,qBAAqBR,cACnE,IAEL4C,iBAAmB7E,EAAM4E,gBACzBN,eAAiBtE,EAAM6E,gBAAkB7E,EAAM4E,sBAC7CnE,IAAI,YAAaT,EAAM6E,gBAAiB7E,EAAMsE,iBAE1DzE,2BAA2BG,MACM,GAAzBA,EAAM6E,uBACC,IAELA,iBAAmB7E,EAAM4E,gBACzBN,eAAiBtE,EAAM6E,gBAAkB7E,EAAM4E,sBAC7CnE,IAAI,YAAaT,EAAM6E,gBAAiB7E,EAAMsE,iBAE1DzE,2BAA2BG,SACjBwF,EAAuBxF,EAAMyC,qBAAqB7C,WAA8C,GAAxBiB,EAAY6B,WACpF+C,EAA0BzF,EAAMyC,qBAAqB7C,WAA8C,GAAxBiB,EAAY6B,WAE/D,WAA1B1C,EAAMyE,qBACAC,yBAA2Be,EAAwBxD,cAEvDxC,EAAO,CACTkB,aAAc6E,KAGZ7C,KAAK,2DAA4DlD,GAAMmD,YACnEjC,aAAeX,EAAMyC,qBAAuBzC,EAAMW,aAAaf,QAAO,SAASU,UAC1ER,KAAK4F,QAAQpF,GAAK,IAC1BkF,OAGX3F,0BAA0BG,SAChB2F,EAAsB3F,EAAMW,aAAaf,WAAsBiB,EAAYmC,kBACzEvC,IAAIkF,SACNlG,EAAO,CACXkB,aAAcgF,KAEVhD,KAAK,2DAA4DlD,GAAMmD,kBAChE/B,KAAe8E,IACR3C,SAAU,KAE3B4C,mBACSC,MAAMA,QAI1BC,QAAS,CACLC,UAAW,EAAEzE,OAAAA,EAAQtB,MAAAA,GAAQC,OAClB,YAAaA,GACbD,EAAMJ,gCAEOI,EAAO+B,WACPiE,EAAMC,IAAI,yDAA2DlE,IAC1EtC,QAKrByG,GAAMC,EAAU3G,EAAgB,CAClC4G,WAAY,CACRC,QAAWC,EACXC,QAAWC,EACXC,QAAWC,EACXC,WAAcC,IAElBnH,KAAM,SACNY,QAAS,+BAEmB2F,EAAMC,IAAI,wDACfxG,kCAGKuG,EAAMC,IAAI,uDACfxG,MAGvBI,kBACYgH,IAAI,CAAC/G,KAAKgH,gBAAiBhH,KAAKiH,eAAgBxC,GAAMrE,SAAS,oBAAqB,aAAa0C,aAC/FtB,OAAO,gBAAiB0F,EAAQ,OAChC1F,OAAO,eAAgB0F,EAAQ,OAC/B1F,OAAO,yBAA0B0F,EAAQ,IAE3CzC,GAAMvE,MAAM0E,yBAA2B,KACjCpD,OAAO,iBAAkB,CAACS,SAAU,eAEpCT,OAAO,iBAAkB,CAACS,SAAUwC,GAAMvE,MAAM8B,WAAW,GAAIuD,SAAS,gBAI7E4B,iBAAiB,qBAChBC,EAAUC,EAAGC,SAAWD,EAAGE,QAC3BC,EAAoB,KAAVH,EAAGjE,IAEfgE,GAAWI,MACRC,oBACGjG,OAAO,qCAK7B4E,GAAIsB,OAAOC,iBAAiBC,SAAW,CACnCC,QAAQ1H,GACGA,EAAMwB,OAAO,GAAGC,cAAgBzB,EAAM0B,MAAM,IAG3DuE,GAAI0B,IAAIrD,IACR2B,GAAI2B,MAAM"}